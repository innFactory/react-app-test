{"version":3,"sources":["model/model.ts","reducers/todo.ts","reducers/createReducer.ts","configureStore.tsx","reducers/index.ts","components/HomeBox.tsx","pages/HomePage.tsx","actions/todo.ts","components/TodoTable.tsx","components/index.ts","components/TodoDialog.tsx","pages/TodoPage.tsx","withRoot.tsx","App.tsx","ReduxRoot.tsx","index.tsx"],"names":["ActionType","initialState","handlers","todoList","_createReducer","Object","defineProperty","ADD_TODO","state","action","concat","toConsumableArray","payload","COMPLETE_TODO","map","t","id","objectSpread","completed","UNCOMPLETE_TODO","DELETE_TODO","filter","arguments","length","undefined","hasOwnProperty","type","persistConfig","key","version","storage","localforage","blacklist","history","createLogger","createBrowserHistory","middleware","applyMiddleware","thunk","persistedReducer","persistReducer","combineReducers","todoReducder","styledBy","property","props","mapping","useStyles","makeStyles","theme","box","display","alignItems","borderRadius","background","red","blue","height","size","width","text","color","HomeBox","other","objectWithoutProperties","classes","react","Paper","assign","className","Typography","variant","root","textAlign","paddingTop","paddingLeft","paddingRight","centerContainer","flex","justifyContent","flexDirection","button","marginTop","connect","_React$useState","React","_React$useState2","slicedToArray","boxColor","setBoxColor","gutterBottom","components_HomeBox","Button","onClick","addTodo","todo","completeTodo","todoId","dispatch","getState","uncompleteTodo","deleteTodo","paper","minWidth","table","TodoTable","actions","Table","TableHead","TableRow","TableCell","padding","TableBody","n","hover","event","Checkbox","checked","IconButton","aria-label","Delete_default","a","textField","margin","TodoDialog","open","onClose","newTodoText","setNewTodoText","handleClose","Math","random","Dialog","DialogTitle","TextField","multiline","value","onChange","target","DialogActions","breakpoints","down","buttonContainer","marginBottom","bindActionCreators","TodoActions","setOpen","Grid","container","components_TodoDialog","item","xs","components","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","withRoot","Component","ThemeProvider","CssBaseline","Routes","content","react_router","exact","path","component","HomePage","TodoPage","Drawer","drawerHeader","Divider","List","ListItem","push","ListItemIcon","Home_default","ListItemText","TodoIcon","uncompletedTodos","Badge","badgeContent","FormatListNumbered_default","zIndex","overflow","appFrame","position","appBar","drawer","navIconHide","up","mixins","toolbar","drawerPaper","backgroundColor","default","withWidth","mobileOpen","setMobileOpen","handleDrawerToggle","AppBar","Toolbar","Menu_default","noWrap","isWidthUp","Hidden","mdUp","anchor","ModalProps","keepMounted","App_Drawer","smDown","logger","store","createStore","persistor","persistStore","configureStore","ReduxRoot","es","integration_react","loading","src_App","rootEl","document","getElementById","ReactDOM","src_ReduxRoot"],"mappings":"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","file":"static/js/main.8de57393.chunk.js","sourcesContent":["\nexport interface Todo {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nexport enum ActionType {\n    ADD_TODO,\n    DELETE_TODO,\n    COMPLETE_TODO,\n    UNCOMPLETE_TODO,\n}\n\nexport interface Action<T> {\n    type: ActionType;\n    payload: T;\n}","import { Action, ActionType, Todo } from '../model/model';\nimport createReducer from './createReducer';\n\nexport const todoList = createReducer([], {\n    [ActionType.ADD_TODO](state: Todo[], action: Action<Todo>) {\n        return [...state, action.payload];\n    },\n    [ActionType.COMPLETE_TODO](state: Todo[], action: Action<number>) {\n        // search after todo item with the given id and set completed to true\n        return state.map((t) => t.id === action.payload ? { ...t, completed: true } : t);\n    },\n    [ActionType.UNCOMPLETE_TODO](state: Todo[], action: Action<number>) {\n        // search after todo item with the given id and set completed to false\n        return state.map((t) => t.id === action.payload ? { ...t, completed: false } : t);\n    },\n    [ActionType.DELETE_TODO](state: Todo[], action: Action<number>) {\n        // remove all todos with the given id\n        return state.filter((t) => t.id !== action.payload);\n    },\n});\n","/**\n * Created by toni on 12.03.2017.\n */\nimport { Action } from '../model/model';\n\nexport default function createReducer(initialState: any, handlers: any) {\n    return function reducer(state: any = initialState, action: Action<any>) {\n        if (handlers.hasOwnProperty(action.type)) {\n            return handlers[action.type](state, action);\n        } else {\n            return state;\n        }\n    };\n}","import { createBrowserHistory } from 'history';\nimport * as localforage from 'localforage';\nimport { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport { PersistConfig, persistReducer, persistStore } from 'redux-persist';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst persistConfig: PersistConfig = {\n    key: 'root',\n    version: 1,\n    storage: localforage,\n    blacklist: [],\n};\n\nconst logger = (createLogger as any)();\nconst history = createBrowserHistory();\n\nconst dev = process.env.NODE_ENV === 'development';\n\nlet middleware = dev ? applyMiddleware(logger, thunk) :\n    applyMiddleware(thunk);\n\nif (dev) {\n    middleware = composeWithDevTools(middleware);\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\nexport default () => {\n    const store = createStore(persistedReducer, {}, middleware);\n    const persistor = persistStore(store);\n    return { store, persistor };\n};\n\nexport { history };\n","\nimport { History } from 'history';\nimport { combineReducers } from 'redux';\nimport { Todo } from '../model/model';\nimport * as todoReducder from './todo';\n\nexport interface RootState {\n  todoList: Todo[];\n}\n\nexport default (history: History) => combineReducers({\n  ...todoReducder\n});","import { makeStyles, Paper, Theme, Typography } from '@material-ui/core';\nimport * as React from 'react';\n\ninterface Props {\n    size: number;\n    color: 'red' | 'blue' | string;\n}\n\nfunction HomeBox(props: Props) {\n    const { size, ...other } = props;\n\n    const classes = useStyles(props);\n\n    return (\n        <Paper className={classes.box} {...other}>\n            <Typography variant=\"subtitle1\" className={classes.text}>\n                I'm an example how to handle dynamic styles based on props\n            </Typography>\n        </Paper>\n    );\n}\n\nconst styledBy = (property: string, props: any, mapping: any): string => mapping[props[property]];\nconst useStyles = makeStyles((theme: Theme) => ({\n\n    box: (props: Props) => ({\n        display: 'flex',\n        alignItems: 'center',\n        borderRadius: 8,\n        background: styledBy('color', props, {\n            red: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n            blue: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        }),\n        height: props.size,\n        width: props.size\n    }),\n\n    text: {\n        color: 'white'\n    }\n}));\n\nexport default HomeBox;","import { Button, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport HomeBox from '../components/HomeBox';\nimport { Todo } from '../model/model';\nimport { RootState } from '../reducers';\n\ninterface Props extends RouteComponentProps<void> {\n  todoList: Todo[];\n}\n\nfunction HomePage(props: Props) {\n  const classes = useStyles();\n  const [boxColor, setBoxColor] = React.useState('red');\n\n  const onButtonClick = () => setBoxColor(boxColor === 'red' ? 'blue' : 'red');\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" gutterBottom>\n        You have {props.todoList.length} TODOs in your list!\n        </Typography>\n      <div className={classes.centerContainer}>\n\n        <HomeBox size={300} color={boxColor} />\n        <Button\n          className={classes.button}\n          onClick={onButtonClick}\n          variant=\"outlined\"\n          color=\"primary\"\n        >\n          Change Color\n        </Button>\n\n      </div>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles({\n  root: {\n    height: '100%',\n    textAlign: 'center',\n    paddingTop: 20,\n    paddingLeft: 15,\n    paddingRight: 15,\n  },\n\n  centerContainer: {\n    flex: 1,\n    height: '90%',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'column'\n  },\n\n  button: {\n    marginTop: 20\n  }\n});\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    todoList: state.todoList\n  };\n}\n\nexport default connect(mapStateToProps)(HomePage);\n","import { Action, ActionType, Todo } from '../model/model';\n\nexport function addTodo(todo: Todo): Action<Todo> {\n\n    return {\n        type: ActionType.ADD_TODO,\n        payload: todo\n    };\n}\n\n// Async Function expample with redux-thunk\nexport function completeTodo(todoId: number) {\n\n    // here you could do API eg\n\n    return (dispatch: Function, getState: Function) => {\n\n        dispatch({ type: ActionType.COMPLETE_TODO, payload: todoId });\n    };\n}\n\nexport function uncompleteTodo(todoId: number): Action<number> {\n\n    return {\n        type: ActionType.UNCOMPLETE_TODO,\n        payload: todoId\n    };\n}\n\nexport function deleteTodo(todoId: number): Action<number> {\n\n    return {\n        type: ActionType.DELETE_TODO,\n        payload: todoId\n    };\n}","import { Checkbox, IconButton, Paper, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport * as TodoActions from '../actions/todo';\nimport { Todo } from '../model/model';\n\ninterface Props {\n    todoList: Todo[];\n    actions: typeof TodoActions;\n}\n\nfunction TodoTable(props: Props) {\n\n    const { todoList, actions } = props;\n    const classes = useStyles();\n\n    const onRowClick = (todo: Todo) => {\n        if (todo.completed) {\n            props.actions.uncompleteTodo(todo.id);\n        } else {\n            props.actions.completeTodo(todo.id);\n        }\n    };\n\n    return (\n        <Paper className={classes.paper}>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell padding=\"normal\">Completed</TableCell>\n                        <TableCell padding=\"normal\">Text</TableCell>\n                        <TableCell padding=\"normal\">Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {todoList.map(n => {\n                        return (\n                            <TableRow\n                                key={n.id}\n                                hover\n                                onClick={event => onRowClick(n)}\n                            >\n                                <TableCell padding=\"none\">\n                                    <Checkbox checked={n.completed} />\n                                </TableCell>\n                                <TableCell padding=\"none\">{n.text}</TableCell>\n                                <TableCell padding=\"none\">\n                                    <IconButton\n                                        aria-label=\"Delete\"\n                                        color=\"default\"\n                                        onClick={() => actions.deleteTodo(n.id)}\n                                    >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n}\n\nconst useStyles = makeStyles({\n    paper: {\n        width: '100%',\n        minWidth: 260,\n        display: 'inline-block'\n    },\n    table: {\n        width: '100%'\n    },\n});\n\nexport default TodoTable;","import TodoTable from './TodoTable';\n\nexport { TodoTable };\n\nexport default TodoTable;","import { Button, Dialog, DialogActions, DialogTitle, TextField } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport * as TodoActions from '../actions/todo';\n\ninterface Props {\n    actions: typeof TodoActions;\n    open: boolean;\n    onClose: () => void;\n}\n\nfunction TodoDialog(props: Props) {\n\n    const { actions, open, onClose } = props;\n    const classes = useStyles();\n    const [newTodoText, setNewTodoText] = React.useState('');\n\n    const handleClose = () => {\n\n        actions.addTodo({ id: Math.random(), completed: false, text: newTodoText });\n        onClose();\n\n        // reset todo text if user reopens the dialog\n        setNewTodoText('');\n    };\n\n    const handleChange = (event: any) => {\n        setNewTodoText(event.target.value);\n    };\n\n    return (\n        <Dialog open={open} onClose={handleClose}>\n            <DialogTitle>Add a new TODO</DialogTitle>\n            <TextField\n                id=\"multiline-flexible\"\n                multiline\n                value={newTodoText}\n                onChange={handleChange}\n                className={classes.textField}\n            />\n            <DialogActions>\n                <Button color=\"primary\" onClick={handleClose}>\n                    OK\n            </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nconst useStyles = makeStyles({\n    textField: {\n        width: '80%',\n        margin: 20\n    }\n});\n\nexport default TodoDialog;","import { Button, Grid, Typography } from '@material-ui/core';\nimport { Theme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport * as TodoActions from '../actions/todo';\nimport TodoTable from '../components';\nimport TodoDialog from '../components/TodoDialog';\nimport { Todo } from '../model/model';\nimport { RootState } from '../reducers/index';\n\ninterface Props extends RouteComponentProps<void> {\n  todoList: Todo[];\n  actions: typeof TodoActions;\n}\n\nfunction TodoPage(props: Props) {\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const { actions, todoList } = props;\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleAddTodo = () => {\n    setOpen(true);\n  };\n\n  return (\n    <Grid\n      container\n      className={classes.root}\n    >\n      <TodoDialog\n        actions={actions}\n        open={open}\n        onClose={handleClose}\n      />\n      <Grid item xs={6}>\n        <Typography variant=\"h4\" gutterBottom>\n          Todo List\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <div className={classes.buttonContainer}>\n          <Button className={classes.button} variant=\"contained\" color=\"secondary\" onClick={handleAddTodo}>\n            Add Todo\n        </Button>\n        </div>\n      </Grid>\n      <Grid item xs={12}>\n        <TodoTable todoList={todoList} actions={actions} />\n      </Grid>\n    </Grid>\n  );\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: 20,\n    [theme.breakpoints.down('md')]: {\n      paddingTop: 50,\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n\n  },\n\n  buttonContainer: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n\n  button: {\n    marginBottom: 15,\n  },\n}));\n\nfunction mapStateToProps(state: RootState) {\n  return {\n    todoList: state.todoList\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    actions: bindActionCreators(TodoActions as any, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoPage);\n","import { CssBaseline } from '@material-ui/core';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport * as React from 'react';\n\n// A theme with custom primary and secondary color.\n// It's optional.\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#e5e5e5',\n      main: '#727272',\n      dark: '#363839',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff5e50',\n      main: '#e41e26',\n      dark: '#a90000',\n      contrastText: '#fff',\n    },\n  },\n});\n\nfunction withRoot(Component: any) {\n  function WithRoot(props: object) {\n    // MuiThemeProvider makes the theme available down the React tree\n    // thanks to React context.\n    return (\n      <ThemeProvider theme={theme}>\n        {/* Reboot kickstart an elegant, consistent, and simple baseline to build upon. */}\n        <CssBaseline />\n        <Component {...props} />\n      </ThemeProvider>\n    );\n  }\n\n  return WithRoot;\n}\n\nexport default withRoot;\n","import { AppBar, Badge, Divider, Drawer as DrawerMui, Hidden, IconButton, List, ListItem, ListItemIcon, ListItemText, Toolbar, Typography, withWidth } from '@material-ui/core';\nimport { Theme } from '@material-ui/core/styles';\nimport { isWidthUp, WithWidth } from '@material-ui/core/withWidth';\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\nimport HomeIcon from '@material-ui/icons/Home';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/styles';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, RouteComponentProps, Router } from 'react-router-dom';\nimport { history } from './configureStore';\nimport { Todo } from './model/model';\nimport HomePage from './pages/HomePage';\nimport TodoPage from './pages/TodoPage';\nimport { RootState } from './reducers/index';\nimport withRoot from './withRoot';\n\nfunction Routes() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.content}>\n            <Route exact={true} path=\"/\" component={HomePage} />\n            <Route exact={true} path=\"/home\" component={HomePage} />\n            <Route exact={true} path=\"/todo\" component={TodoPage} />\n        </div>\n    );\n}\n\nfunction Drawer(props: { todoList: Todo[] }) {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <div className={classes.drawerHeader} />\n            <Divider />\n            <List>\n                <ListItem button onClick={() => history.push('/')}>\n                    <ListItemIcon>\n                        <HomeIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Home\" />\n                </ListItem>\n            </List>\n            <Divider />\n            <List>\n                <ListItem button onClick={() => history.push('/todo')}>\n                    <ListItemIcon>\n                        <TodoIcon todoList={props.todoList} />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Todo\" />\n                </ListItem>\n            </List>\n        </div>\n    );\n}\n\ninterface Props extends RouteComponentProps<void>, WithWidth {\n    todoList: Todo[];\n}\n\nfunction App(props?: Props) {\n    const classes = useStyles();\n    const [mobileOpen, setMobileOpen] = React.useState(true);\n\n    if (!props) {\n        return null;\n    }\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    return (\n        <Router history={history}>\n            <div className={classes.root}>\n                <div className={classes.appFrame}>\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <IconButton\n                                color=\"inherit\"\n                                aria-label=\"open drawer\"\n                                onClick={handleDrawerToggle}\n                                className={classes.navIconHide}\n                            >\n                                <MenuIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" color=\"inherit\" noWrap={isWidthUp('sm', props.width)}>\n                                Create-React-App with Material-UI, Typescript, Redux and Routing\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    <Hidden mdUp>\n                        <DrawerMui\n                            variant=\"temporary\"\n                            anchor={'left'}\n                            open={mobileOpen}\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                            onClose={handleDrawerToggle}\n                            ModalProps={{\n                                keepMounted: true, // Better open performance on mobile.\n                            }}\n                        >\n                            <Drawer todoList={props.todoList} />\n                        </DrawerMui>\n                    </Hidden>\n                    <Hidden smDown>\n                        <DrawerMui\n                            variant=\"permanent\"\n                            open\n                            classes={{\n                                paper: classes.drawerPaper,\n                            }}\n                        >\n                            <Drawer todoList={props.todoList} />\n                        </DrawerMui>\n                    </Hidden>\n                    <Routes />\n                </div>\n            </div>\n        </Router>\n    );\n\n}\n\nfunction TodoIcon(props: { todoList: Todo[] }) {\n    let uncompletedTodos = props.todoList.filter(t => t.completed === false);\n\n    if (uncompletedTodos.length > 0) {\n        return (\n            <Badge color=\"secondary\" badgeContent={uncompletedTodos.length}>\n                <FormatListNumberedIcon />\n            </Badge>\n        );\n    } else {\n        return (\n            <FormatListNumberedIcon />\n        );\n    }\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        width: '100%',\n        height: '100%',\n        zIndex: 1,\n        overflow: 'hidden',\n    },\n    appFrame: {\n        position: 'relative',\n        display: 'flex',\n        width: '100%',\n        height: '100%',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n        position: 'absolute',\n    },\n    navIconHide: {\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n    drawerHeader: theme.mixins.toolbar,\n    drawerPaper: {\n        width: 250,\n        backgroundColor: theme.palette.background.default,\n        [theme.breakpoints.up('md')]: {\n            width: drawerWidth,\n            position: 'relative',\n            height: '100%',\n        },\n    },\n    content: {\n        backgroundColor: theme.palette.background.default,\n        width: '100%',\n        height: 'calc(100% - 56px)',\n        marginTop: 56,\n        [theme.breakpoints.up('sm')]: {\n            height: 'calc(100% - 64px)',\n            marginTop: 64,\n        },\n    },\n}));\n\nfunction mapStateToProps(state: RootState) {\n    return {\n        todoList: state.todoList\n    };\n}\n\nexport default connect(mapStateToProps)(withRoot(withWidth()(App)));\n","\nimport { Typography } from '@material-ui/core';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport configureStore from './configureStore';\n\nconst logger = (createLogger as any)();\n\nlet middleware = applyMiddleware(logger, thunk);\n\nif (process.env.NODE_ENV === 'development') {\n    middleware = composeWithDevTools(middleware);\n}\n\nconst { persistor, store } = configureStore();\n\nfunction ReduxRoot() {\n\n    return (\n        <Provider store={store}>\n            <PersistGate loading={<Typography>Loading...</Typography>} persistor={persistor}>\n                <App />\n            </PersistGate>\n        </Provider>\n    );\n}\n\nexport default ReduxRoot;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport ReduxRoot from './ReduxRoot';\n\nconst rootEl = document.getElementById('root');\nReactDOM.render(<ReduxRoot />, rootEl);\n\n// comment in for PWA with service worker in production mode\n// registerServiceWorker();"],"sourceRoot":""}